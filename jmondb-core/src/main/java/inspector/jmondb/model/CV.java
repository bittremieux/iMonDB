package inspector.jmondb.model;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.persistence.*;

@Entity
@Table(name="imon_cv")
public class CV {

	@Transient
	private static final Logger logger = LogManager.getLogger(CV.class);

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;

	/** the label identifying the controlled vocabulary */
	@Column(name="label", nullable=false, unique=true, length=20)
	private String label;
	/** the full name of the controlled vocabulary */
	@Column(name="name", nullable=false, length=200)
	private String name;
	/** the uri specifying the location of the controlled vocabulary */
	@Column(name="uri", nullable=false, length=200)
	private String uri;
	/** the version number of the controlled vocabulary */
	@Column(name="version", length=20)
	private String version;

	/**
	 * Default constructor required by JPA.
	 * Protected access modification to enforce that client code uses the constructor that sets the required member variables.
	 */
	protected CV() {

	}

	/**
	 * Creates a CV with the specified accession number, cvProperty, label, name and ontology reference.
	 *
	 * The id is automatically determined by the database as primary key.
	 *
	 * @param label  The label identifying the controlled vocabulary
	 * @param name  The full name of the controlled vocabulary
	 * @param uri  The uri specifying the location of the controlled vocabulary
	 * @param version  The version number of the controlled vocabulary
	 */
	public CV(String label, String name, String uri, String version) {
		this();

		setLabel(label);
		setName(name);
		setUri(uri);
		setVersion(version);
	}

	public Long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String label) {
		if(label != null)
			this.label = label;
		else {
			logger.error("The CV's label is not allowed to be <null>");
			throw new NullPointerException("The CV's label is not allowed to be <null>");
		}
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		if(name != null)
			this.name = name;
		else {
			logger.error("The CV's name is not allowed to be <null>");
			throw new NullPointerException("The CV's name is not allowed to be <null>");
		}
	}

	public String getUri() {
		return uri;
	}

	public void setUri(String uri) {
		if(uri != null)
			this.uri = uri;
		else {
			logger.error("The CV's URI is not allowed to be <null>");
			throw new NullPointerException("The CV's URI is not allowed to be <null>");
		}
	}

	public String getVersion() {
		return version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		CV that = (CV) o;

		if(label != null ? !label.equals(that.label) : that.label != null) return false;
		if(name != null ? !name.equals(that.name) : that.name != null) return false;
		if(uri != null ? !uri.equals(that.uri) : that.uri != null) return false;
		if(version != null ? !version.equals(that.version) : that.version != null) return false;

		return true;
	}

	@Override
	public String toString() {
		return "CV {id=" + id + ", label=" + label + "}";
	}
}
