package inspector.jmondb.model;

/*
 * #%L
 * jMonDB Core
 * %%
 * Copyright (C) 2014 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.proxy.HibernateProxyHelper;

import javax.persistence.*;
import java.util.Objects;

/**
 * A {@code CV} represents a controlled vocabulary which contains a formal definition for some {@link Property}s.
 */
@Entity
@Access(AccessType.FIELD)
@Table(name="imon_cv")
public class CV {

    @Transient
    private static final Logger LOGGER = LogManager.getLogger(CV.class);

    /** read-only iMonDB primary key; generated by JPA */
    @Id
    @Column(name="id", nullable=false)
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    private Long id;

    /** the label identifying the controlled vocabulary */
    @Column(name="label", nullable=false, unique=true, length=20)
    private String label;
    /** the full name of the controlled vocabulary */
    @Column(name="name", nullable=false, length=200)
    private String name;
    /** the uri specifying the location of the controlled vocabulary */
    @Column(name="uri", nullable=false, length=200)
    private String uri;
    /** the version number of the controlled vocabulary */
    @Column(name="version", length=20)
    private String version;

    /**
     * Default constructor required by JPA.
     * Protected access modification enforces class immutability.
     */
    protected CV() {

    }

    /**
     * Creates a {@code CV} representing a controlled vocabulary.
     *
     * @param label  the label identifying the controlled vocabulary, not {@code null}
     * @param name  the full name of the controlled vocabulary, not {@code null}
     * @param uri  the uri specifying the location of the controlled vocabulary, not {@code null}
     * @param version  the version number of the controlled vocabulary
     */
    public CV(String label, String name, String uri, String version) {
        this();

        setLabel(label);
        setName(name);
        setUri(uri);
        setVersion(version);
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLabel() {
        return label;
    }

    private void setLabel(String label) {
        if(label != null) {
            this.label = label;
        } else {
            LOGGER.error("The CV's label is not allowed to be <null>");
            throw new NullPointerException("The CV's label is not allowed to be <null>");
        }
    }

    public String getName() {
        return name;
    }

    private void setName(String name) {
        if(name != null) {
            this.name = name;
        } else {
            LOGGER.error("The CV's name is not allowed to be <null>");
            throw new NullPointerException("The CV's name is not allowed to be <null>");
        }
    }

    public String getUri() {
        return uri;
    }

    private void setUri(String uri) {
        if(uri != null) {
            this.uri = uri;
        } else {
            LOGGER.error("The CV's URI is not allowed to be <null>");
            throw new NullPointerException("The CV's URI is not allowed to be <null>");
        }
    }

    public String getVersion() {
        return version;
    }

    private void setVersion(String version) {
        this.version = version;
    }

    @Override
    public boolean equals(Object o) {
        if(this == o) {
            return true;
        }
        if(o == null || getClass() != HibernateProxyHelper.getClassWithoutInitializingProxy(o)) {
            return false;
        }

        final CV cv = (CV) o;
        return     Objects.equals(label, cv.getLabel())
                && Objects.equals(name, cv.getName())
                && Objects.equals(uri, cv.getUri())
                && Objects.equals(version, cv.getVersion());
    }

    @Override
    public int hashCode() {
        return Objects.hash(label, name, uri, version);
    }

    @Override
    public String toString() {
        return "CV {id=" + id + ", label=" + label + "}";
    }
}
