package inspector.jmondb.model;

/*
 * #%L
 * jMonDB Core
 * %%
 * Copyright (C) 2014 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.persistence.*;

/**
 * A {@code Value} signifies a summary value calculated out of a range of different observations.
 *
 * A {@code Value} can be uniquely identified by the combination of its defining {@link Property} and its originating {@link Run}.
 */
@Entity
@Access(AccessType.FIELD)
@Table(name = "imon_value")
public class Value {

	@Transient
	private static final Logger logger = LogManager.getLogger(Value.class);

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;

	/** the first observation */
	@Column(name="firstvalue", length=200)
	private String firstValue;
	/** the number of observations used to calculate the summary value */
	@Column(name="n")
	private Integer n;
	/** the number of different observations */
	@Column(name="n_diffvalues")
	private Integer nDiffValues;
	/** the minimum observation */
	@Column(name="min")
	private Double min;
	/** the maximum observation */
	@Column(name="max")
	private Double max;
	/** the mean observation */
	@Column(name="mean")
	private Double mean;
	/** the median observation */
	@Column(name="median")
	private Double median;
	/** the standard deviation */
	@Column(name="sd")
	private Double sd;
	/** the first quartile */
	@Column(name="q1")
	private Double q1;
	/** the third quartile */
	@Column(name="q3")
	private Double q3;

	/** inverse part of the bi-directional relationship with {@link Property} */
	@ManyToOne(cascade={CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
	@JoinColumn(name="l_imon_property_id", nullable=false, referencedColumnName="id")
	private Property definingProperty;

	/** inverse part of the bi-directional relationship with {@link Run} */
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="l_imon_run_id", nullable=false, referencedColumnName="id")
	private Run originatingRun;

	/**
	 * Default constructor required by JPA.
	 * Protected access modification enforces class immutability.
	 */
	protected Value() {

	}

	/**
	 * Creates a {@code Value}. Use the {@link ValueBuilder} to easily create a Value with a specific set of member variables.
	 *
	 * This {@code Value} signifies a summary value calculated out of a range of different observations.
	 *
	 * @param firstValue  the first observation
	 * @param n  the number of observations used to calculate the summary value
	 * @param nDiffValues  the number of different observations
	 * @param min  the minimum observation
	 * @param max  the maximum observation
	 * @param mean  the mean observation
	 * @param median  the median observation
	 * @param sd  the standard deviation
	 * @param q1  the first quartile
	 * @param q3  the third quartile
	 * @param property  the {@link Property} that defines the value, not {@code null}
	 * @param run  the {@link Run} from which the value originates, not {@code null}
	 */
	public Value(String firstValue, Integer n, Integer nDiffValues, Double min, Double max, Double mean, Double median, Double sd, Double q1, Double q3, Property property, Run run) {
		this();

		this.firstValue = firstValue;
		this.n = n;
		this.nDiffValues = nDiffValues;
		this.min = min;
		this.max = max;
		this.mean = mean;
		this.median = median;
		this.sd = sd;
		this.q1 = q1;
		this.q3 = q3;

		setDefiningProperty(property);
		setOriginatingRun(run);
		property.assignValue(this);
		run.addValue(this);
	}

	public Long getId() {
		return id;
	}

	public Property getDefiningProperty() {
		return definingProperty;
	}

	private void setDefiningProperty(Property property) {
		if(property != null)
			this.definingProperty = property;
		else {
			logger.error("The value's defining property is not allowed to be <null>");
			throw new NullPointerException("The value's defining property is not allowed to be <null>");
		}
	}

	public Run getOriginatingRun() {
		return originatingRun;
	}

	private void setOriginatingRun(Run run) {
		if(run != null)
			this.originatingRun = run;
		else {
			logger.error("The value's originating run is not allowed to be <null>");
			throw new NullPointerException("The value's originating run is not allowed to be <null>");
		}
	}

	public String getFirstValue() {
		return firstValue;
	}

	public Integer getN() {
		return n;
	}

	public Integer getNDiffValues() {
		return nDiffValues;
	}

	public Double getMin() {
		return min;
	}

	public Double getMax() {
		return max;
	}

	public Double getMean() {
		return mean;
	}

	public Double getMedian() {
		return median;
	}

	public Double getSd() {
		return sd;
	}

	public Double getQ1() {
		return q1;
	}

	public Double getQ3() {
		return q3;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		Value value = (Value) o;

		if(firstValue != null ? !firstValue.equals(value.firstValue) : value.firstValue != null) return false;
		if(n != null ? !n.equals(value.n) : value.n != null) return false;
		if(nDiffValues != null ? !nDiffValues.equals(value.nDiffValues) : value.nDiffValues != null) return false;
		if(min != null ? !min.equals(value.min) : value.min != null) return false;
		if(max != null ? !max.equals(value.max) : value.max != null) return false;
		if(mean != null ? !mean.equals(value.mean) : value.mean != null) return false;
		if(median != null ? !median.equals(value.median) : value.median != null) return false;
		if(sd != null ? !sd.equals(value.sd) : value.sd != null) return false;
		if(q1 != null ? !q1.equals(value.q1) : value.q1 != null) return false;
		if(q3 != null ? !q3.equals(value.q3) : value.q3 != null) return false;
		if(!definingProperty.equals(value.definingProperty)) return false;
		if(!originatingRun.equals(value.originatingRun)) return false;

		return true;
	}

	@Override
	public int hashCode() {
		int result = firstValue != null ? firstValue.hashCode() : 0;
		result = 31 * result + (n != null ? n.hashCode() : 0);
		result = 31 * result + (nDiffValues != null ? nDiffValues.hashCode() : 0);
		result = 31 * result + (min != null ? min.hashCode() : 0);
		result = 31 * result + (max != null ? max.hashCode() : 0);
		result = 31 * result + (mean != null ? mean.hashCode() : 0);
		result = 31 * result + (median != null ? median.hashCode() : 0);
		result = 31 * result + (sd != null ? sd.hashCode() : 0);
		result = 31 * result + (q1 != null ? q1.hashCode() : 0);
		result = 31 * result + (q3 != null ? q3.hashCode() : 0);
		result = 31 * result + definingProperty.hashCode();
		result = 31 * result + originatingRun.hashCode();
		return result;
	}

	@Override
	public String toString() {
		return "Value {id=" + id + ", firstValue=" + firstValue +
				", property=" + definingProperty.getName() + ", run=" + originatingRun.getName() + "}";
	}
}
