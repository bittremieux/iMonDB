package inspector.jmondb.model;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.annotations.SortNatural;

import javax.persistence.*;
import java.sql.Timestamp;
import java.util.*;

/**
 * An {@code Instrument} represents a specific mass spectrometry instrument.
 *
 * An {@code Instrument} is defined by an instrument type (specified by a {@link CV} and a user-specified name for this specific instrument.
 */
@Entity
@Access(AccessType.FIELD)
@Table(name = "imon_instrument")
public class Instrument {

	@Transient
	private static final Logger logger = LogManager.getLogger(Value.class);

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;

	/** the instrument name */
	@Column(name="name", nullable=false, unique=true, length=100)
	private String name;
	/** the {@link InstrumentModel} ({@link InstrumentModel#toString()} returns the accession number) */
	@Column(name="type", nullable=false, length=10)
	private InstrumentModel type;
	/** the {@link CV} that contains the instrument description */
	@ManyToOne(cascade={CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.EAGER)
	@JoinColumn(name="l_imon_cv_id", nullable=false, referencedColumnName="id")
	private CV cv;

	@OneToMany(cascade=CascadeType.REMOVE, fetch=FetchType.LAZY, mappedBy="instrument")
	@MapKey(name="date")
	@OrderBy("date ASC")
	@SortNatural
	private SortedMap<Timestamp, Event> events;

	@OneToMany(cascade=CascadeType.REMOVE, fetch=FetchType.LAZY, mappedBy="instrument")
	@MapKey(name="sampleDate")
	@OrderBy("sampleDate ASC")
	@SortNatural
	private SortedMap<Timestamp, Run> runsPerformedOnInstrument;

	/**
	 * Default constructor required by JPA.
	 * Protected access modification enforces class immutability.
	 */
	protected Instrument() {
		events = new TreeMap<>();
		runsPerformedOnInstrument = new TreeMap<>();
	}

	/**
	 * Creates a specific {@link Instrument}.
	 *
	 * An {@code Instrument} is of a specific type (i.e. Orbitrap, Q-Exactive) and has a specific name (user-dependent).
	 *
	 * @param name  the instrument name, not {@code null}
	 * @param type  the {@link InstrumentModel}, not {@code null}
	 * @param cv  the {@link CV} that contains the instrument description, not {@code null}
	 */
	public Instrument(String name, InstrumentModel type, CV cv) {
		this();

		setName(name);
		setType(type);
		setCv(cv);
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	private void setName(String name) {
		if(name != null)
			this.name = name;
		else {
			logger.error("The instrument's name is not allowed to be <null>");
			throw new NullPointerException("The instrument's name is not allowed to be <null>");
		}
	}

	public InstrumentModel getType() {
		return type;
	}

	private void setType(InstrumentModel type) {
		if(type != null)
			this.type = type;
		else {
			logger.error("The instrument's type is not allowed to be <null>");
			throw new NullPointerException("The instrument's type is not allowed to be <null>");
		}
	}

	public CV getCv() {
		return cv;
	}

	private void setCv(CV cv) {
		if(cv != null)
			this.cv = cv;
		else {
			logger.error("The instrument's CV is not allowed to be <null>");
			throw new NullPointerException("The instrument's CV is not allowed to be <null>");
		}
	}

	/**
	 * Returns the {@link Run} that was performed on this {@code Instrument} at the given time.
	 *
	 * @param time  the {@link Timestamp} sample date when the {@code Run} was performed
	 * @return the {@code Run} that was performed on this {@code Instrument} at the given time
	 */
	public Run getRun(Timestamp time) {
		if(time != null)
			return runsPerformedOnInstrument.get(time);
		else
			return null;
	}

	/**
	 * Returns an {@link Iterator} over all {@link Run}s that were performed on this {@code Instrument}.
	 *
	 * @return an {@link Iterator} over all {@link Run}s that were performed on this {@code Instrument}
	 */
	public Iterator<Run> getRunIterator() {
		return runsPerformedOnInstrument.values().iterator();
	}

	/**
	 * Returns all {@link Run}s that were performed on this {@code Instrument} in the given time period.
	 * The time period is from {@code startTime} included until {@code stopTime} excluded.
	 *
	 * <em>Attention!</em> Underlying the whole range of {@code Run}s will be accessed for conversion to a {@link TreeMap}.
	 * Therefore it is discouraged to call this method when the amount of {@code Run}s might be high.
	 *
	 * @param startTime  start time (inclusive) of the {@code Run}s to be included, not {@code null}
	 * @param stopTime  stop time (excluded) of the {@code Run}s to be included, not {@code null}
	 * @return a {@link SortedMap} of {@code Run}s that were performed on this {@code Instrument} in the given time period
	 */
	public SortedMap<Timestamp, Run> getRunRange(Timestamp startTime, Timestamp stopTime) {
		if(startTime != null && stopTime != null)
			return runsPerformedOnInstrument.subMap(startTime, stopTime);
		else {
			if(startTime == null) {
				logger.error("The start time is not allowed to be <null>");
				throw new NullPointerException("The start time is not allowed to be <null>");
			}
			else {
				logger.error("The stop time is not allowed to be <null>");
				throw new NullPointerException("The stop time is not allowed to be <null>");
			}
		}
	}

	/**
	 * Adds the given {@link Run} to this {@code Instrument}.
	 *
	 * If the {@code Instrument} previously contained a {@code Run} performed at the same time, the old {@code Run} is replaced.
	 *
	 * A {@code Run} is automatically added to its {@code Instrument} upon its instantiation.
	 *
	 * @param run  the {@code Run} that is added to this {@code Instrument}, not {@code null}
	 */
	void addRun(Run run) {
		if(run != null)
			runsPerformedOnInstrument.put(run.getSampleDate(), run);
		else {
			logger.error("Can't add a <null> run to the instrument");
			throw new NullPointerException("Can't add a <null> run to the instrument");
		}
	}

	/**
	 * Returns the {@link Event} for this {@code Instrument} that occurred at the given time.
	 *
	 * @param time  the {@link Timestamp} date when the {@code Event} was occurred
	 * @return the {@code Event} that was occurred on this {@code Instrument} at the given time
	 */
	public Event getEvent(Timestamp time) {
		if(time != null)
			return events.get(time);
		else
			return null;
	}

	/**
	 * Returns an {@link Iterator} over all {@link Event}s that occurred on this {@code Instrument}.
	 *
	 * @return an {@link Iterator} over all {@link Event}s that occurred on this {@code Instrument}
	 */
	public Iterator<Event> getEventIterator() {
		return events.values().iterator();
	}

	/**
	 * Returns all {@link Event}s that occurred on this {@code Instrument} in the given time period.
	 * The time period is from {@code startTime} included until {@code stopTime} excluded.
	 *
	 * <em>Attention!</em> Underlying the whole range of {@code Event}s will be accessed for conversion to a {@link TreeMap}.
	 * Therefore it is discouraged to call this method when the amount of {@code Event}s might be high.
	 *
	 * @param startTime  start time (inclusive) of the {@code Event}s to be included, not {@code null}
	 * @param stopTime  stop time (excluded) of the {@code Event}s to be included, not {@code null}
	 * @return a {@link SortedMap} of {@code Event}s that occurred on this {@code Instrument} in the given time period
	 */
	public SortedMap<Timestamp, Event> getEventRange(Timestamp startTime, Timestamp stopTime) {
		if(startTime != null && stopTime != null)
			return events.subMap(startTime, stopTime);
		else {
			if(startTime == null) {
				logger.error("The start time is not allowed to be <null>");
				throw new NullPointerException("The start time is not allowed to be <null>");
			}
			else {
				logger.error("The stop time is not allowed to be <null>");
				throw new NullPointerException("The stop time is not allowed to be <null>");
			}
		}
	}

	/**
	 * Adds the given {@link Event} to this {@code Instrument}.
	 *
	 * If the {@code Instrument} previously contained a {@code Event} at the same time, the old {@code Event} is replaced.
	 *
	 * An {@code Event} is automatically added to its {@code Instrument} upon its instantiation.
	 *
	 * @param event  the {@code Event} that is added to this {@code Instrument}, not {@code null}
	 */
	void addEvent(Event event) {
		if(event != null)
			events.put(event.getDate(), event);
		else {
			logger.error("Can't add a <null> event to the instrument");
			throw new NullPointerException("Can't add a <null> event to the instrument");
		}
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		Instrument that = (Instrument) o;

		if(!name.equals(that.name)) return false;
		if(!type.equals(that.type)) return false;
		if(!cv.equals(that.cv)) return false;

		return true;
	}

	@Override
	public int hashCode() {
		int result = name.hashCode();
		result = 31 * result + type.hashCode();
		result = 31 * result + cv.hashCode();
		return result;
	}
}
