package inspector.jmondb.model;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.persistence.*;
import java.util.*;

/**
 * A {@code Property} provides a definition for specific {@link Value}s.
 */
@Entity
@Access(AccessType.FIELD)
@Table(name="imon_property")
public class Property {

	@Transient
	private static final Logger logger = LogManager.getLogger(Property.class);

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;

	/** the name of the property */
	@Column(name="name", nullable=false, length=200)
	private String name;
	/** the type of the property */
	@Column(name="type", nullable=false, length=20)
	private String type;
	/** the accession number that identifies the property in the controlled vocabulary */
	@Column(name="accession", nullable=false, unique=true, length=255)
	private String accession;
	/** the {@link CV} that contains the property definition */
	@ManyToOne(cascade={CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.EAGER)
	@JoinColumn(name="l_imon_cv_id", nullable=false, referencedColumnName="id")
	private CV cv;

	/** indicates whether the property describes numerical data */
	@Column(name="isnumeric", nullable=false)
	private Boolean isNumeric;

	/** all {@link Value}s that are represented by this property */
	@OneToMany(cascade=CascadeType.REMOVE, fetch=FetchType.LAZY, mappedBy="definingProperty")
	@MapKey
	private Map<Run, Value> propertyValues;

	/**
	 * Default constructor required by JPA.
	 * Protected access modification to enforce that client code uses the constructor that sets the required member variables.
	 */
	protected Property() {
		propertyValues = new HashMap<>(1000);
	}

	/**
	 * Creates a {@code Property} that defines some specific {@link Value}s.
	 *
	 * @param name  the name of the property, not {@code null}
	 * @param type  the type of the property, not {@code null}
	 * @param accession  the accession number that identifies the property in the controlled vocabulary, not {@code null}
	 * @param cv  the {@link CV} that contains the property definition, not {@code null}
	 * @param isNumeric  indicates whether the property describes numerical data, not {@code null}
	 */
	public Property(String name, String type, String accession, CV cv, Boolean isNumeric) {
		this();

		setName(name);
		setType(type);
		setAccession(accession);
		setCv(cv);
		setNumeric(isNumeric);
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	private void setName(String name) {
		if(name != null)
			this.name = name;
		else {
			logger.error("The property's name is not allowed to be <null>");
			throw new NullPointerException("The property's name is not allowed to be <null>");
		}
	}

	public String getType() {
		return type;
	}

	private void setType(String type) {
		if(type != null)
			this.type = type;
		else {
			logger.error("The property's type is not allowed to be <null>");
			throw new NullPointerException("The property's type is not allowed to be <null>");
		}
	}

	public String getAccession() {
		return accession;
	}

	private void setAccession(String accession) {
		if(accession != null)
			this.accession = accession;
		else {
			logger.error("The property's accession is not allowed to be <null>");
			throw new NullPointerException("The property's accession is not allowed to be <null>");
		}
	}

	public CV getCv() {
		return cv;
	}

	private void setCv(CV cv) {
		if(cv != null)
			this.cv = cv;
		else {
			logger.error("The property's CV is not allowed to be <null>");
			throw new NullPointerException("The property's CV is not allowed to be <null>");
		}
	}

	public Boolean getNumeric() {
		return isNumeric;
	}

	private void setNumeric(Boolean numeric) {
		if(numeric != null)
			this.isNumeric = numeric;
		else {
			logger.error("It is mandatory to specify whether the property is numeric");
			throw new NullPointerException("It is mandatory to specify whether the property is numeric");
		}
	}

	/**
	 * Returns the {@link Value} that is defined by this {@code Property} and that originates from the given {@link Run}.
	 *
	 * @param run  the {@code Run} from which the requested {@code Value} originates, {@code null} returns {@code null}
	 * @return the {@code Value} that is defined by this {@code Property} and that originates from the given {@code Run} if it exists, {@code null} otherwise
	 */
	public Value getValue(Run run) {
		if(run != null)
			return propertyValues.get(run);
		else
			return null;
	}

	/**
	 * Returns an {@link Iterator} over all {@link Value}s that are defined by this {@code Property}.
	 *
	 * @return an {@code Iterator} over all {@code Value}s that are defined by this {@code Property}
	 */
	public Iterator<Value> getValueIterator() {
		return propertyValues.values().iterator();
	}

	/**
	 * Assigns the given {@link Value} to this {@code Property}.
	 *
	 * If the {@code Property} previously contained a {@code Value} originating from the same {@link Run}, the old {@code Value} is replaced.
	 *
	 * A {@code Value} is automatically assigned to its {@code Property} upon its instantiation.
	 *
	 * @param value  the {@code Value} that is assigned to this {@code Property}, not {@code null}
	 */
	void assignValue(Value value) {
		if(value != null)
			propertyValues.put(value.getOriginatingRun(), value);
		else {
			logger.error("Can't add a <null> value to the property");
			throw new NullPointerException("Can't add a <null> value to the property");
		}
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		Property property = (Property) o;

		if(!name.equals(property.name)) return false;
		if(!type.equals(property.type)) return false;
		if(!accession.equals(property.accession)) return false;
		if(!cv.equals(property.cv)) return false;
		if(!isNumeric.equals(property.isNumeric)) return false;

		return true;
	}

	@Override
	public int hashCode() {
		int result = name.hashCode();
		result = 31 * result + type.hashCode();
		result = 31 * result + accession.hashCode();
		result = 31 * result + cv.hashCode();
		result = 31 * result + isNumeric.hashCode();
		return result;
	}

	@Override
	public String toString() {
		return "Property {id=" + id + ", name=" + name + ", type=" + type + ", CV=" + cv.getLabel()+ "#" + accession + "}";
	}
}
