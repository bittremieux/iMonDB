package inspector.jmondb.model;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.persistence.*;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

@Entity
@Table(name="imon_run")
public class Run {

	@Transient
	private static final Logger logger = LogManager.getLogger(Run.class);

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;

	/** the name identifying the run */
	@Column(name="name", nullable=false, length=100)
	private String name;
	/** the location of the raw data belonging to the run */
	@Column(name="storage_name", nullable=false, length=255)
	private String storageName;
	/** the date on which the run was performed */
	@Column(name="sampledate", nullable=false)
	private Timestamp sampleDate;

	/** list of {@link Value}s for the run */
	@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER, mappedBy="fromRun")
	@MapKey(name="accession")
	private Map<String, Value> hasValues;

	/**
	 * Default constructor required by JPA.
	 * Protected access modification to enforce that client code uses the constructor that sets the required member variables.
	 */
	protected Run() {
		hasValues = new HashMap<>();
	}

	/**
	 * Creates a Run with the specified name, storage name and sample date.
	 *
	 * The id is automatically determined by the database as primary key.
	 *
	 * @param name  The name identifying the run
	 * @param storageName  The location of the raw data belonging to the run
	 * @param sampleDate  The date on which the run was performed
	 */
	public Run(String name, String storageName, Timestamp sampleDate) {
		this();

		setName(name);
		setStorageName(storageName);
		setSampleDate(sampleDate);
	}

	public Long getId() {
		return id;
	}

	/* package private: read-only key to be set by the JPA implementation */
	void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		if(name != null)
			this.name = name;
		else {
			logger.error("The run's name is not allowed to be <null>");
			throw new NullPointerException("The run's name is not allowed to be <null>");
		}
	}

	public String getStorageName() {
		return storageName;
	}

	public void setStorageName(String storageName) {
		if(storageName != null)
			this.storageName = storageName;
		else {
			logger.error("The run's storage name is not allowed to be <null>");
			throw new NullPointerException("The run's storage name is not allowed to be <null>");
		}
	}

	public Timestamp getSampleDate() {
		return sampleDate;
	}

	public void setSampleDate(Timestamp sampleDate) {
		if(sampleDate != null)
			this.sampleDate = sampleDate;
		else {
			logger.error("The run's sample date is not allowed to be <null>");
			throw new NullPointerException("The run's sample date is not allowed to be <null>");
		}
	}

	/**
	 * Returns the number of {@link Value}s for the run.
	 *
	 * @return The number of Values for the run
	 */
	public int getNumberOfValues() {
		return hasValues.size();
	}

	/**
	 * Returns the {@link Value} with the specified accession for the run.
	 *
	 * @param accession  The accession of the requested Value
	 * @return The Value with the specified accession for the run
	 */
	public Value getValue(String accession) {
		if(accession != null)
			return hasValues.get(accession);
		else
			return null;
	}

	/**
	 * Returns an {@link Iterator} over all {@link Value}s for the run.
	 *
	 * @return An Iterator over all Values for the run
	 */
	public Iterator<Value> getValueIterator() {
		return hasValues.values().iterator();
	}

	/**
	 * Adds the given {@link Value} to the run.
	 *
	 * If a Value with the same accession was already present, the previous Value is replaced by the given Value.
	 *
	 * @param value  The Value that will be added to the run
	 */
	public void addValue(Value value) {
		if(value != null) {
			value.setFromRun(this);	// add the bi-directional relationship
			hasValues.put(value.getAccession(), value);
		}
		else {
			logger.error("Can't add <null> Value to a Run");
			throw new NullPointerException("Can't add <null> Value");
		}
	}

	/**
	 * Removes the {@link Value} specified by the given accession from the run.
	 *
	 * @param accession  The accession of the Value that will be removed
	 */
	public void removeValue(String accession) {
		if(accession != null) {
			Value value = hasValues.get(accession);
			if(value != null)	// remove the bi-directional relationship
				value.setFromRun(null);
			hasValues.remove(accession);
		}
	}

	/**
	 * Removes all {@link Value}s from the run.
	 */
	public void removeAllValues() {
		Iterator<Value> it = getValueIterator();
		while(it.hasNext()) {
			Value value = it.next();
			// first remove the bi-directional relationship
			value.setFromRun(null);
			// remove the value
			it.remove();
		}
	}

	/**
	 * Indicates whether some other object is "equal to" this one.
	 *
	 * Two Runs are considered equal if their direct metadata is equal <em>and</em> all their underlying {@link Value}s are equal.
	 *
	 * @param o  The reference object with which to compare
	 * @return <code>true</code> if this object is the same as the o argument; <code>false</code> otherwise
	 */
	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		Run that = (Run) o;

		if(name != null ? !name.equals(that.name) : that.name != null) return false;
		if(sampleDate != null ? !sampleDate.equals(that.sampleDate) : that.sampleDate != null) return false;
		if(storageName != null ? !storageName.equals(that.storageName) : that.storageName != null) return false;
		if(getNumberOfValues() != that.getNumberOfValues()) return false;

		for(Iterator<Value> valIt = getValueIterator(); valIt.hasNext(); ) {
			Value valThis = valIt.next();
			Value valThat = that.getValue(valThis.getAccession());

			if(valThat != null && !valThis.equals(valThat)) return false;
		}

		return true;
	}

	@Override
	public String toString() {
		return "Run {id=" + id + ", name=" + name + ", #values=" + getNumberOfValues() + "}";
	}
}
