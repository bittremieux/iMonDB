package inspector.jmondb.model;

import javax.persistence.*;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

@Entity
@Table(name="imon_run")
public class Run {

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private long id;
	/** the name identifying the run */
	@Column(name="name", nullable=false, length=100)
	private String name;
	/** the location of the raw data belonging to the run */
	@Column(name="storage_name", nullable=false, length=255)
	private String storageName;
	/** the date on which the run was performed */
	@Column(name="sampledate", nullable=false)
	private Timestamp sampleDate;

	/** inverse part of the bi-directional relationship with {@link Project} */
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="l_project_id", referencedColumnName="id")
	private Project fromProject;

	//TODO
	@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="fromRun")
	@MapKey(name="id")
	private Map<Long, Value> hasValues;

	/**
	 * Creates a Run with the specified name, storage name and sample date.
	 *
	 * The id is automatically determined by the database as primary key.
	 *
	 * @param name  The name identifying the run
	 * @param storageName  The location of the raw data belonging to the run
	 * @param sampleDate  The date on which the run was performed
	 */
	public Run(String name, String storageName, Timestamp sampleDate) {
		this.name = name;
		this.storageName = storageName;
		this.sampleDate = sampleDate;

		hasValues = new HashMap<>();
	}

	public long getId() {
		return id;
	}

	/* package private: read-only key to be set by the JPA implementation */
	void setId(long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getStorageName() {
		return storageName;
	}

	public void setStorageName(String storageName) {
		this.storageName = storageName;
	}

	public Timestamp getSampleDate() {
		return sampleDate;
	}

	public void setSampleDate(Timestamp sampleDate) {
		this.sampleDate = sampleDate;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		Run that = (Run) o;

		if(id != that.id) return false;
		if(name != null ? !name.equals(that.name) : that.name != null) return false;
		if(sampleDate != null ? !sampleDate.equals(that.sampleDate) : that.sampleDate != null) return false;
		if(storageName != null ? !storageName.equals(that.storageName) : that.storageName != null) return false;

		return true;
	}

	@Override
	public int hashCode() {
		int result = (int) (id ^ (id >>> 32));
		result = 31 * result + (name != null ? name.hashCode() : 0);
		result = 31 * result + (storageName != null ? storageName.hashCode() : 0);
		result = 31 * result + (sampleDate != null ? sampleDate.hashCode() : 0);
		return result;
	}
}
