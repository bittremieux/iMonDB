package inspector.jmondb.model;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.persistence.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

@Entity
@Table(name="project")
public class Project {

	@Transient
	private static final Logger logger = LogManager.getLogger(Project.class);

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private long id;
	/** the project description */
	@Column(name="description", length=255)
	private String description;
	/** the label identifying the project */
	@Column(name="label", nullable=false, unique=true, length=20)
	private String label;
	/** the project title */
	@Column(name="title", nullable=false, length=100)
	private String title;

	/** list of {@link Run}s belonging to the project */
	@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="fromProject")
	@MapKey(name="id")
	private Map<Long, Run> hasRuns;

	/**
	 * Default constructor required by JPA.
	 * Protected access modification to enforce that client code uses the constructor that sets the required member variables.
	 */
	protected Project() {
		hasRuns = new HashMap<>();
	}

	/**
	 * Creates a Project with the specified label and title.
	 *
	 * The id is automatically determined by the database as primary key.
	 *
	 * @param label  The label identifying the project
	 * @param title  The project title
	 */
	public Project(String label, String title) {
		this();

		this.label = label;
		this.title = title;
	}

	/**
	 * Creates a Project with the specified label, title and description.
	 *
	 *  The primary key is automatically determined by the database.
	 *
	 * @param label  The label identifying the project
	 * @param title  The project title
	 * @param description  The project description
	 */
	public Project(String label, String title, String description) {
		this(label, title);
		this.description = description;
	}

	public long getId() {
		return id;
	}

	/* package private: read-only key to be set by the JPA implementation */
	void setId(long id) {
		this.id = id;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String label) {
		this.label = label;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Returns the number of {@link Run}s that belong to the project.
	 *
	 * @return The number of Runs that belong to the project
	 */
	public int getNumberOfRuns() {
		return hasRuns.size();
	}

	/**
	 * Returns the {@link Run} with the specified id belonging to the project.
	 *
	 * @param id  The id of the requested Run
	 * @return The Run with the specified id belonging to the project
	 */
	public Run getRun(Long id) {
		if(id != null)
			return hasRuns.get(id);
		else
			return null;
	}

	/**
	 * Returns an {@link Iterator} over all {@link Run}s belonging to the project.
	 *
	 * @return An Iterator over all Runs belonging to the project
	 */
	public Iterator<Run> getRunIterator() {
		return hasRuns.values().iterator();
	}

	/**
	 * Adds the given {@link Run} to the project.
	 *
	 * If a Run with the same id was already present, the previous Run is replaced by the given Run.
	 *
	 * @param run  The Run that will be added to the project
	 */
	public void addRun(Run run) {
		if(run != null) {
			run.setFromProject(this);	// add the bi-directional relationship
			hasRuns.put(run.getId(), run);
		}
		else {
			logger.error("Can't add <null> Run to a Project");
			throw new NullPointerException("Can't add <null> Run");
		}
	}

	/**
	 * Removes the {@link Run} specified by the given id from the project.
	 *
	 * @param id  The id of the Run that will be removed
	 */
	public void removeRun(Long id) {
		if(id != null) {
			Run run = hasRuns.get(id);
			if(run != null)	// remove the bi-directional relationship
				run.setFromProject(null);
			hasRuns.remove(id);
		}
	}

	/**
	 * Removes all {@link Run}s from the project.
	 */
	public void removeAllRuns() {
		Iterator<Run> it = getRunIterator();
		while(it.hasNext()) {
			Run run = it.next();
			// first remove the bi-directional relationship
			run.setFromProject(null);
			// remove the run
			it.remove();
		}
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		Project that = (Project) o;

		if(id != that.id) return false;
		if(description != null ? !description.equals(that.description) : that.description != null) return false;
		if(label != null ? !label.equals(that.label) : that.label != null) return false;
		if(title != null ? !title.equals(that.title) : that.title != null) return false;

		return true;
	}

	@Override
	public int hashCode() {
		int result = (int) (id ^ (id >>> 32));
		result = 31 * result + (description != null ? description.hashCode() : 0);
		result = 31 * result + (label != null ? label.hashCode() : 0);
		result = 31 * result + (title != null ? title.hashCode() : 0);
		return result;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("Project {id=").append(id).append(", label=").append(label).append("\n");
		Iterator<Run> it = getRunIterator();
		while(it.hasNext())
			sb.append("\t").append(it.next()).append("\n");
		sb.append("}");

		return sb.toString();
	}
}
