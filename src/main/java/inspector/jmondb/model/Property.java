package inspector.jmondb.model;

import javax.persistence.*;
import java.util.HashMap;
import java.util.Map;

@Entity
@Table(name="imon_property")
public class Property {

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private long id;
	/** the name identifying the property */
	@Column(name="name", nullable=false, length=200)
	private String name;
	/** the type of property */
	@Column(name="type", nullable=false, length=20)
	private String type;

	//TODO
	@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="hasProperty")
	@MapKey(name="id")
	private Map<Long, Value> definesValues;

	/** inverse part of the bi-directional relationship with {@link CvTerm} */
	@ManyToOne(fetch=FetchType.EAGER)
	@JoinColumn(name="l_imon_cv_term_id", referencedColumnName="id")
	private Property hasCvTerm;

	/**
	 * Creates a Property with the specified name and type.
	 *
	 * The id is automatically determined by the database as primary key.
	 *
	 * @param name  The name identifying the property
	 * @param type  The type of property
	 */
	public Property(String name, String type) {
		this.name = name;
		this.type = type;

		definesValues = new HashMap<>();
	}

	public long getId() {
		return id;
	}

	/* package private: read-only key to be set by the JPA implementation */
	void setId(long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		Property that = (Property) o;

		if(id != that.id) return false;
		if(name != null ? !name.equals(that.name) : that.name != null) return false;
		if(type != null ? !type.equals(that.type) : that.type != null) return false;

		return true;
	}

	@Override
	public int hashCode() {
		int result = (int) (id ^ (id >>> 32));
		result = 31 * result + (name != null ? name.hashCode() : 0);
		result = 31 * result + (type != null ? type.hashCode() : 0);
		return result;
	}
}
