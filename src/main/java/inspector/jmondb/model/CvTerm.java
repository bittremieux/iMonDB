package inspector.jmondb.model;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.persistence.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

@Entity
@Table(name="imon_cv_term")
public class CvTerm {

	@Transient
	private static final Logger logger = LogManager.getLogger(CvTerm.class);

	/** read-only iMonDB primary key; generated by JPA */
	@Id
	@Column(name="id", nullable=false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private long id;
	/** the accession number identifying the term in its controlled vocabulary */
	@Column(name="accession", nullable=false, length=255)
	private String accession;
	/** TODO */
	@Column(name="cv_property", nullable=false, length=255)
	private String cvProperty;
	/** TODO */
	@Column(name="label", nullable=false, length=255)
	private String label;
	/** the name for the term */
	@Column(name="name", nullable=false, length=255)
	private String name;
	/** the reference to the ontology or controlled vocabulary in which the term is defined */
	@Column(name="ontology", nullable=false, length=20)
	private String ontology;

	/** list of {@link Property}s that are defined by the CvTerm */
	@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="hasCvTerm")
	@MapKey(name="id")
	private Map<Long, Property> definesProperties;

	/**
	 * Creates a CvTerm with the specified accession number, cvProperty, label, name and ontology reference.
	 *
	 * The id is automatically determined by the database as primary key.
	 *
	 * @param accession  The accession number identifying the term in its controlled vocabulary
	 * @param cvProperty
	 * @param label
	 * @param name  The name for the term
	 * @param ontology  The reference to the ontology or controlled vocabulary in which the term is defined
	 */
	public CvTerm(String accession, String cvProperty, String label, String name, String ontology) {
		this.accession = accession;
		this.cvProperty = cvProperty;
		this.label = label;
		this.name = name;
		this.ontology = ontology;

		definesProperties = new HashMap<>();
	}

	public long getId() {
		return id;
	}

	/* package private: read-only key to be set by the JPA implementation */
	void setId(long id) {
		this.id = id;
	}

	public String getAccession() {
		return accession;
	}

	public void setAccession(String accession) {
		this.accession = accession;
	}

	public String getCvProperty() {
		return cvProperty;
	}

	public void setCvProperty(String cvProperty) {
		this.cvProperty = cvProperty;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String label) {
		this.label = label;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getOntology() {
		return ontology;
	}

	public void setOntology(String ontology) {
		this.ontology = ontology;
	}

	/**
	 * Returns the number of {@link Property}s that are defined by the term.
	 *
	 * @return The number of Properties that are defined by the term
	 */
	public int getNumberOfProperties() {
		return definesProperties.size();
	}

	/**
	 * Returns the {@link Property} with the specified id that is defined by the term.
	 *
	 * @param id  The id of the requested Property
	 * @return The Property with the specified id that is defined by the term
	 */
	public Property getProperty(Long id) {
		if(id != null)
			return definesProperties.get(id);
		else
			return null;
	}

	/**
	 * Returns an {@link Iterator} over all {@link Property}s that are defined by the term.
	 *
	 * @return An Iterator over all Properties that are defined by the term
	 */
	public Iterator<Property> getPropertyIterator() {
		return definesProperties.values().iterator();
	}

	/**
	 * Links the given {@link Property} to the term.
	 *
	 * If a Property with the same id was already present, the previous Property is replaced by the given Property.
	 *
	 * @param property  The Property that will be linked to the term
	 */
	public void addProperty(Property property) {
		if(property != null) {
			property.setCvTerm(this);	// add the bi-directional relationship
			definesProperties.put(property.getId(), property);
		}
		else {
			logger.error("Can't add <null> Property to a CvTerm");
			throw new NullPointerException("Can't add <null> Property");
		}
	}

	/**
	 * Disconnects the {@link Property} specified by the given id from the term.
	 *
	 * @param id  The id of the Property that will be disconnected
	 */
	public void removeProperty(Long id) {
		if(id != null) {
			Property property = definesProperties.get(id);
			if(property != null)	// remove the bi-directional relationship
				property.setCvTerm(null);
			definesProperties.remove(id);
		}
	}

	/**
	 * Disconnects all {@link Property}s from the term.
	 */
	public void removeAllProperties() {
		Iterator<Property> it = getPropertyIterator();
		while(it.hasNext()) {
			Property property = it.next();
			// first remove the bi-directional relationship
			property.setCvTerm(null);
			// remove the property
			it.remove();
		}
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) return true;
		if(o == null || getClass() != o.getClass()) return false;

		CvTerm that = (CvTerm) o;

		if(id != that.id) return false;
		if(accession != null ? !accession.equals(that.accession) : that.accession != null) return false;
		if(cvProperty != null ? !cvProperty.equals(that.cvProperty) : that.cvProperty != null) return false;
		if(label != null ? !label.equals(that.label) : that.label != null) return false;
		if(name != null ? !name.equals(that.name) : that.name != null) return false;
		if(ontology != null ? !ontology.equals(that.ontology) : that.ontology != null) return false;

		return true;
	}

	@Override
	public int hashCode() {
		int result = (int) (id ^ (id >>> 32));
		result = 31 * result + (accession != null ? accession.hashCode() : 0);
		result = 31 * result + (cvProperty != null ? cvProperty.hashCode() : 0);
		result = 31 * result + (label != null ? label.hashCode() : 0);
		result = 31 * result + (name != null ? name.hashCode() : 0);
		result = 31 * result + (ontology != null ? ontology.hashCode() : 0);
		return result;
	}
}
