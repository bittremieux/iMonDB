package inspector.imondb.collector.view.gui.external;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import inspector.imondb.collector.controller.listeners.ConfigurationChangeListener;
import inspector.imondb.collector.controller.listeners.SenseSynchronizeListener;
import inspector.imondb.collector.model.config.DeviceInfo;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;

public class ExternalPanel extends Observable {

    private JPanel panel;

    private JButton buttonSynchronize;

    private JTextField textFieldUsername;
    private JPasswordField passwordField;

    private JPanel panelDevices;
    private JScrollPane scrollPaneDevices;

    private Map<DeviceInfo, CookiePanel> deviceInfos;

    private boolean isSynchronized;

    public ExternalPanel(String userName, String password, List<DeviceInfo> devices) {
        $$$setupUI$$$();

        deviceInfos = new HashMap<>();

        textFieldUsername.setText(userName);
        passwordField.setText(password);

        textFieldUsername.setName("sense_username");
        passwordField.setName("sense_password");

        isSynchronized = false;

        devices.forEach(this::addCookie);
        clearChanged();
    }

    public JPanel getPanel() {
        return panel;
    }

    private void createUIComponents() {
        panelDevices = new JPanel();
        panelDevices.setLayout(new BoxLayout(panelDevices, BoxLayout.PAGE_AXIS));
    }

    public String getUserName() {
        return textFieldUsername.getText();
    }

    public String getPassword() {
        String password = new String(passwordField.getPassword());
        return password.isEmpty() ? null : password;
    }

    public List<DeviceInfo> getDevices() {
        return new ArrayList<>(deviceInfos.keySet());
    }

    public void addSenseSynchronizeListener(SenseSynchronizeListener senseSynchronizeListener) {
        buttonSynchronize.addActionListener(senseSynchronizeListener);
    }

    public void addCookie(DeviceInfo deviceInfo) {
        CookiePanel cookiePanel = new CookiePanel(deviceInfo);

        cookiePanel.getCheckBoxTemperature().addActionListener(e -> {
            deviceInfo.setTemperatureActive(cookiePanel.getCheckBoxTemperature().isSelected());
            setChanged();
            notifyObservers();
        });
        cookiePanel.getCheckBoxMotion().addActionListener(e -> {
            deviceInfo.setMotionActive(cookiePanel.getCheckBoxMotion().isSelected());
            setChanged();
            notifyObservers();
        });

        if(!deviceInfos.containsKey(deviceInfo)) {
            deviceInfos.put(deviceInfo, cookiePanel);
            panelDevices.add(cookiePanel.getPanel());

            setChanged();
        }
    }

    public boolean isSynchronized() {
        return isSynchronized;
    }

    public void setSynchronized(boolean isSynchronized) {
        this.isSynchronized = isSynchronized;
    }

    public void addConfigurationChangeListener(ConfigurationChangeListener listener) {
        textFieldUsername.addFocusListener(listener);
        passwordField.addFocusListener(listener);
        addObserver(listener);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow", "center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTH;
        panel.add(panel1, gbc);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(11);
        label1.setText("Username");
        label1.setDisplayedMnemonic('U');
        label1.setDisplayedMnemonicIndex(0);
        label1.setToolTipText("The Sen.se username");
        CellConstraints cc = new CellConstraints();
        panel1.add(label1, cc.xy(1, 3));
        textFieldUsername = new JTextField();
        textFieldUsername.setMaximumSize(new Dimension(420, 24));
        textFieldUsername.setMinimumSize(new Dimension(420, 24));
        textFieldUsername.setPreferredSize(new Dimension(420, 24));
        textFieldUsername.setText("");
        panel1.add(textFieldUsername, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.CENTER));
        passwordField = new JPasswordField();
        passwordField.setMaximumSize(new Dimension(420, 24));
        passwordField.setMinimumSize(new Dimension(420, 24));
        passwordField.setPreferredSize(new Dimension(420, 24));
        panel1.add(passwordField, cc.xy(3, 5, CellConstraints.FILL, CellConstraints.CENTER));
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(11);
        label2.setText("Password");
        label2.setDisplayedMnemonic('P');
        label2.setDisplayedMnemonicIndex(0);
        label2.setToolTipText("The Sen.se password");
        panel1.add(label2, cc.xy(1, 5));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow", "center:d:grow"));
        panel1.add(panel2, cc.xy(3, 1, CellConstraints.LEFT, CellConstraints.DEFAULT));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0), null));
        final JLabel label3 = new JLabel();
        label3.setText("Import external data from Sen.se smart sensors.");
        panel2.add(label3, cc.xy(1, 1));
        buttonSynchronize = new JButton();
        buttonSynchronize.setText("Synchronize");
        buttonSynchronize.setMnemonic('S');
        buttonSynchronize.setDisplayedMnemonicIndex(0);
        panel2.add(buttonSynchronize, cc.xy(3, 1));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        panel3.setMinimumSize(new Dimension(405, 160));
        panel3.setPreferredSize(new Dimension(405, 160));
        panel1.add(panel3, cc.xy(3, 7));
        scrollPaneDevices = new JScrollPane();
        scrollPaneDevices.setHorizontalScrollBarPolicy(31);
        scrollPaneDevices.setVerticalScrollBarPolicy(20);
        panel3.add(scrollPaneDevices, BorderLayout.CENTER);
        scrollPaneDevices.setViewportView(panelDevices);
        label1.setLabelFor(textFieldUsername);
        label2.setLabelFor(passwordField);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
