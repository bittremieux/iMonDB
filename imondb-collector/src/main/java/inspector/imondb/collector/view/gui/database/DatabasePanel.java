package inspector.imondb.collector.view.gui.database;

/*
 * #%L
 * iMonDB Collector
 * %%
 * Copyright (C) 2014 - 2015 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import inspector.imondb.collector.controller.listeners.ConfigurationChangeListener;

import javax.swing.*;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.EventListener;

public class DatabasePanel {

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:d:grow", "center:max(d;4px):noGrow,top:3dlu:noGrow,center:d:noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
        panel.add(panel1);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(11);
        label1.setText("<html><b>Host</b></html>");
        label1.setDisplayedMnemonic('H');
        label1.setDisplayedMnemonicIndex(9);
        label1.setToolTipText("The MySQL host");
        CellConstraints cc = new CellConstraints();
        panel1.add(label1, cc.xy(1, 3));
        textFieldHost = new JTextField();
        textFieldHost.setMaximumSize(new Dimension(420, 24));
        textFieldHost.setMinimumSize(new Dimension(420, 24));
        textFieldHost.setPreferredSize(new Dimension(420, 24));
        textFieldHost.setText("localhost");
        panel1.add(textFieldHost, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(11);
        label2.setText("<html><b>Port</b></html>");
        label2.setDisplayedMnemonic('P');
        label2.setDisplayedMnemonicIndex(9);
        label2.setToolTipText("The MySQL port");
        panel1.add(label2, cc.xy(1, 5));
        final JLabel label3 = new JLabel();
        label3.setHorizontalAlignment(11);
        label3.setText("<html><b>Database</b></html>");
        label3.setDisplayedMnemonic('D');
        label3.setDisplayedMnemonicIndex(9);
        label3.setToolTipText("The iMonDB database name");
        panel1.add(label3, cc.xy(1, 7));
        final JLabel label4 = new JLabel();
        label4.setHorizontalAlignment(11);
        label4.setText("<html><b>User name</b></html>");
        label4.setDisplayedMnemonic('U');
        label4.setDisplayedMnemonicIndex(9);
        label4.setToolTipText("The MySQL user name");
        panel1.add(label4, cc.xy(1, 9));
        final JLabel label5 = new JLabel();
        label5.setHorizontalAlignment(11);
        label5.setText("Password");
        label5.setDisplayedMnemonic('W');
        label5.setDisplayedMnemonicIndex(4);
        label5.setToolTipText("The password for the given user");
        panel1.add(label5, cc.xy(1, 11));
        textFieldPort = new JTextField();
        textFieldPort.setMaximumSize(new Dimension(420, 24));
        textFieldPort.setMinimumSize(new Dimension(420, 24));
        textFieldPort.setPreferredSize(new Dimension(420, 24));
        textFieldPort.setText("3306");
        panel1.add(textFieldPort, cc.xy(3, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        textFieldDatabase = new JTextField();
        textFieldDatabase.setMaximumSize(new Dimension(420, 24));
        textFieldDatabase.setMinimumSize(new Dimension(420, 24));
        textFieldDatabase.setPreferredSize(new Dimension(420, 24));
        textFieldDatabase.setText("iMonDB");
        panel1.add(textFieldDatabase, cc.xy(3, 7, CellConstraints.FILL, CellConstraints.DEFAULT));
        textFieldUserName = new JTextField();
        textFieldUserName.setMaximumSize(new Dimension(420, 24));
        textFieldUserName.setMinimumSize(new Dimension(420, 24));
        textFieldUserName.setPreferredSize(new Dimension(420, 24));
        panel1.add(textFieldUserName, cc.xy(3, 9, CellConstraints.FILL, CellConstraints.DEFAULT));
        passwordField = new JPasswordField();
        passwordField.setMaximumSize(new Dimension(420, 24));
        passwordField.setMinimumSize(new Dimension(420, 24));
        passwordField.setPreferredSize(new Dimension(420, 24));
        panel1.add(passwordField, cc.xy(3, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:d:grow", "center:d:noGrow"));
        panel1.add(panel2, cc.xy(3, 1, CellConstraints.LEFT, CellConstraints.DEFAULT));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 15, 0), null));
        buttonVerify = new JButton();
        buttonVerify.setText("Verify");
        buttonVerify.setMnemonic('V');
        buttonVerify.setDisplayedMnemonicIndex(0);
        panel2.add(buttonVerify, cc.xy(1, 1));
        labelStatus = new JLabel();
        labelStatus.setHorizontalAlignment(11);
        labelStatus.setIcon(new ImageIcon(getClass().getResource("/images/warning.png")));
        labelStatus.setText("No/unverified connection");
        panel2.add(labelStatus, cc.xy(3, 1));
        label1.setLabelFor(textFieldHost);
        label2.setLabelFor(textFieldPort);
        label3.setLabelFor(textFieldDatabase);
        label4.setLabelFor(textFieldUserName);
        label5.setLabelFor(passwordField);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    public enum ConnectionStatus {
        CONNECTED, FAILED_CONNECTION, IN_PROGRESS, UNKNOWN
    }

    private static ImageIcon iconInvalidConnection = new ImageIcon(DatabasePanel.class.getResource("/images/nok.png"));
    private static ImageIcon iconUnknownConnection = new ImageIcon(DatabasePanel.class.getResource("/images/warning.png"));
    private static ImageIcon iconValidConnection = new ImageIcon(DatabasePanel.class.getResource("/images/ok.png"));

    private JPanel panel;

    private JButton buttonVerify;
    private JLabel labelStatus;

    private JTextField textFieldHost;
    private JTextField textFieldPort;
    private JTextField textFieldDatabase;
    private JTextField textFieldUserName;
    private JPasswordField passwordField;

    private ConnectionStatus connectionStatus;

    public DatabasePanel() {
        connectionStatus = ConnectionStatus.UNKNOWN;

        textFieldHost.setName("db_host");
        textFieldPort.setName("db_port");
        textFieldDatabase.setName("db_database");
        textFieldUserName.setName("db_username");
        passwordField.setName("db_password");
    }

    public DatabasePanel(String host, String port, String username, String password, String database) {
        this();

        textFieldHost.setText(host);
        textFieldPort.setText(port);
        textFieldDatabase.setText(database);
        textFieldUserName.setText(username);
        passwordField.setText(password);
    }

    public JPanel getPanel() {
        return panel;
    }

    public String getHost() {
        return textFieldHost.getText();
    }

    public String getPort() {
        return textFieldPort.getText();
    }

    public String getDatabase() {
        return textFieldDatabase.getText();
    }

    public String getUserName() {
        return textFieldUserName.getText();
    }

    public String getPassword() {
        String password = new String(passwordField.getPassword());
        return password.isEmpty() ? null : password;
    }

    public ConnectionStatus getConnectionStatus() {
        return connectionStatus;
    }

    public void setConnectionStatus(ConnectionStatus status) {
        connectionStatus = status;

        switch(connectionStatus) {
            case CONNECTED:
                labelStatus.setIcon(iconValidConnection);
                labelStatus.setText("Valid connection settings");
                break;
            case FAILED_CONNECTION:
                labelStatus.setIcon(iconInvalidConnection);
                labelStatus.setText("Invalid connection settings");
                break;
            case IN_PROGRESS:
                labelStatus.setIcon(iconUnknownConnection);
                labelStatus.setText("Verifying connection settings");
                break;
            case UNKNOWN:
            default:
                labelStatus.setIcon(iconUnknownConnection);
                labelStatus.setText("No/unverified connection");
                break;
        }

        if(connectionStatus == ConnectionStatus.IN_PROGRESS) {
            textFieldHost.setEnabled(false);
            textFieldPort.setEnabled(false);
            textFieldDatabase.setEnabled(false);
            textFieldUserName.setEnabled(false);
            passwordField.setEnabled(false);
        } else {
            textFieldHost.setEnabled(true);
            textFieldPort.setEnabled(true);
            textFieldDatabase.setEnabled(true);
            textFieldUserName.setEnabled(true);
            passwordField.setEnabled(true);
        }
    }

    public void addConfigurationChangeListener(ConfigurationChangeListener listener) {
        textFieldHost.addFocusListener(listener);
        textFieldPort.addFocusListener(listener);
        textFieldDatabase.addFocusListener(listener);
        textFieldUserName.addFocusListener(listener);
        passwordField.addFocusListener(listener);
    }

    public void addDatabaseConnectionListener(EventListener listener) {
        buttonVerify.addActionListener((ActionListener) listener);

        textFieldHost.getDocument().addDocumentListener((DocumentListener) listener);
        textFieldPort.getDocument().addDocumentListener((DocumentListener) listener);
        textFieldDatabase.getDocument().addDocumentListener((DocumentListener) listener);
        textFieldUserName.getDocument().addDocumentListener((DocumentListener) listener);
        passwordField.getDocument().addDocumentListener((DocumentListener) listener);
    }
}
