package inspector.imondb.collector.view.gui.instrument;

/*
 * #%L
 * iMonDB Collector
 * %%
 * Copyright (C) 2014 - 2015 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import inspector.imondb.collector.model.RegexMap;
import inspector.imondb.collector.model.RegexSource;
import org.apache.commons.io.FilenameUtils;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.Collection;

public class RegexMapTestPanel {

    private JPanel panel;

    private JTextField textFieldInput;

    private DefaultListModel<String> listModel;
    private JList<String> listMatches;

    public RegexMapTestPanel() {
        $$$setupUI$$$();
    }

    public RegexMapTestPanel(Collection<? extends RegexMap> regexMaps) {
        this();

        textFieldInput.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update();
            }

            private void update() {
                // remove old matches
                listModel.clear();

                // add new matches
                String fileName = FilenameUtils.getName(textFieldInput.getText());
                String filePath = FilenameUtils.getFullPath(textFieldInput.getText());

                regexMaps.stream().filter(regexMap ->
                        (regexMap.getSource() == RegexSource.NAME && fileName.matches(regexMap.getRegex())) ||
                                (regexMap.getSource() == RegexSource.PATH && filePath.matches(regexMap.getRegex()))).
                        forEach(regexMap -> listModel.addElement(regexMap.getKey()));
            }
        });
    }

    private void createUIComponents() {
        listModel = new DefaultListModel<>();
        listMatches = new JList<>(listModel);
    }

    public JPanel getPanel() {
        return panel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:d:grow", "center:d:noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(11);
        label1.setText("Input string");
        label1.setDisplayedMnemonic('I');
        label1.setDisplayedMnemonicIndex(0);
        CellConstraints cc = new CellConstraints();
        panel.add(label1, cc.xy(1, 1));
        textFieldInput = new JTextField();
        panel.add(textFieldInput, cc.xy(3, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(11);
        label2.setText("Matching items");
        label2.setDisplayedMnemonic('M');
        label2.setDisplayedMnemonicIndex(0);
        panel.add(label2, cc.xy(1, 3, CellConstraints.DEFAULT, CellConstraints.TOP));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setHorizontalScrollBarPolicy(31);
        scrollPane1.setVerticalScrollBarPolicy(22);
        panel.add(scrollPane1, cc.xy(3, 3, CellConstraints.DEFAULT, CellConstraints.FILL));
        scrollPane1.setViewportView(listMatches);
        label1.setLabelFor(textFieldInput);
        label2.setLabelFor(scrollPane1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
