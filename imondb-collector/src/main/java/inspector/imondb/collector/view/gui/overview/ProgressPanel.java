package inspector.imondb.collector.view.gui.overview;

/*
 * #%L
 * iMonDB Collector
 * %%
 * Copyright (C) 2014 - 2015 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import inspector.imondb.collector.controller.CollectorTask;
import inspector.imondb.collector.controller.ExecutionController;
import inspector.imondb.collector.view.gui.CollectorFrame;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import java.awt.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class ProgressPanel {

    private JPanel panel;

    private JTextPane textPaneLog;
    private JProgressBar progressBar;

    private ExecutionPanel executionPanel;

    private CollectorFrame collectorFrame;
    private ExecutionController executionController;

    private CollectorTask task;

    public ProgressPanel(ExecutionPanel executionPanel, CollectorFrame collectorFrame, ExecutionController executionController) {
        this.executionPanel = executionPanel;
        this.collectorFrame = collectorFrame;
        this.executionController = executionController;

        textPaneLog.setEditable(false);
        textPaneLog.getDocument().addDocumentListener(new LimitLinesDocumentListener(50));
        redirectSystemStreams();

        progressBar.setMaximum(100);
        progressBar.setStringPainted(true);
    }

    // http://unserializableone.blogspot.com/2009/01/redirecting-systemout-and-systemerr-to.html
    private void redirectSystemStreams() {
        Style styleOut = textPaneLog.addStyle("out", null);
        StyleConstants.setForeground(styleOut, Color.BLACK);
        OutputStream osOut = new OutputStream() {
            @Override
            public void write(final int b) throws IOException {
                updateTextPane(String.valueOf((char) b), styleOut);
            }
        };
        Style styleErr = textPaneLog.addStyle("err", styleOut);
        StyleConstants.setForeground(styleErr, Color.RED);
        OutputStream osErr = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextPane(String.valueOf((char) b), styleErr);
            }
        };

        System.setOut(new PrintStream(osOut, true));
        System.setErr(new PrintStream(osErr, true));
    }

    private void updateTextPane(final String text, Style style) {
        SwingUtilities.invokeLater(() -> {
            Document doc = textPaneLog.getDocument();
            try {
                doc.insertString(doc.getLength(), text, style);
            } catch(BadLocationException e) {
                throw new RuntimeException(e);
            }
            textPaneLog.setCaretPosition(doc.getLength());
        });
    }

    public JPanel getPanel() {
        return panel;
    }

    public void start() {
        collectorFrame.setWaitCursor(true);
        reset();

        task = executionController.getCollectorTask(this);
        task.execute();
    }

    private void reset() {
        setProgress(0);
    }

    public void stop() {
        task.cancelExecution();

        collectorFrame.setWaitCursor(false);
    }

    public void setProgress(int percentage) {
        progressBar.setValue(percentage);
        progressBar.setString(percentage + " %");
    }

    public void done() {
        executionPanel.getButton().setText("Start collector");
        collectorFrame.setWaitCursor(false);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new BorderLayout(0, 0));
        panel.setMaximumSize(new Dimension(600, 200));
        panel.setMinimumSize(new Dimension(600, 200));
        panel.setPreferredSize(new Dimension(600, 200));
        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, BorderLayout.CENTER);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        scrollPane1.setViewportView(panel1);
        textPaneLog = new JTextPane();
        panel1.add(textPaneLog, BorderLayout.CENTER);
        progressBar = new JProgressBar();
        panel.add(progressBar, BorderLayout.SOUTH);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
