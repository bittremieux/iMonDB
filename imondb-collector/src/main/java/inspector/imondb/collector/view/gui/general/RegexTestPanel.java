package inspector.imondb.collector.view.gui.general;

/*
 * #%L
 * iMonDB Collector
 * %%
 * Copyright (C) 2014 - 2015 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;

public class RegexTestPanel {

    private static final ImageIcon iconMatch = new ImageIcon(RegexTestPanel.class.getResource("/images/ok.png"));
    private static final ImageIcon iconNoMatch = new ImageIcon(RegexTestPanel.class.getResource("/images/nok.png"));

    private JPanel panel;

    private JTextField textFieldRegex;
    private JTextField textFieldInput;
    private JLabel labelResult;

    public RegexTestPanel() {
        RegexListener listener = new RegexListener();
        textFieldRegex.getDocument().addDocumentListener(listener);
        textFieldInput.getDocument().addDocumentListener(listener);
    }

    public RegexTestPanel(String regex) {
        this();

        textFieldRegex.setText(regex);
    }

    public JPanel getPanel() {
        return panel;
    }

    public String getRegex() {
        return textFieldRegex.getText();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:d:grow", "center:d:noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(11);
        label1.setText("Regular expression");
        CellConstraints cc = new CellConstraints();
        panel.add(label1, cc.xy(1, 1));
        textFieldRegex = new JTextField();
        textFieldRegex.setMaximumSize(new Dimension(200, 24));
        textFieldRegex.setMinimumSize(new Dimension(200, 24));
        textFieldRegex.setPreferredSize(new Dimension(200, 24));
        textFieldRegex.setText("");
        panel.add(textFieldRegex, cc.xy(3, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(11);
        label2.setText("Input string");
        panel.add(label2, cc.xy(1, 3));
        textFieldInput = new JTextField();
        textFieldInput.setMaximumSize(new Dimension(200, 24));
        textFieldInput.setMinimumSize(new Dimension(200, 24));
        textFieldInput.setPreferredSize(new Dimension(200, 24));
        panel.add(textFieldInput, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label3 = new JLabel();
        label3.setHorizontalAlignment(11);
        label3.setText("Result");
        panel.add(label3, cc.xy(1, 5));
        labelResult = new JLabel();
        labelResult.setText("");
        panel.add(labelResult, cc.xy(3, 5));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    private class RegexListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            update();
        }

        private void update() {
            boolean matches = textFieldInput.getText().matches(textFieldRegex.getText());
            labelResult.setIcon(matches ? iconMatch : iconNoMatch);
            labelResult.setText(matches ? "match" : "no match");
        }
    }
}
